/**
 * Provisioning API
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model.  The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.646
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['provisioning/ApiClient', 'provisioning/model/AddUser', 'provisioning/model/AddUserWwe', 'provisioning/model/ApiErrorResponse', 'provisioning/model/ApiSuccessResponse', 'provisioning/model/ApiSuccessResponseStatus', 'provisioning/model/Extension', 'provisioning/model/Login', 'provisioning/model/LoginSuccessResponse', 'provisioning/model/LoginSuccessResponseData', 'provisioning/model/LoginSuccessResponseStatus', 'provisioning/model/ModelDelete', 'provisioning/model/ObjectsGetResponseError', 'provisioning/model/ObjectsGetResponseStatusError', 'provisioning/model/ObjectsGetResponseStatusSuccess', 'provisioning/model/ObjectsGetResponseStatusSuccessData', 'provisioning/model/ObjectsGetResponseSuccess', 'provisioning/model/OptionsGetResponseError', 'provisioning/model/OptionsGetResponseStatusError', 'provisioning/model/OptionsGetResponseStatusSuccess', 'provisioning/model/OptionsGetResponseStatusSuccessData', 'provisioning/model/OptionsGetResponseSuccess', 'provisioning/model/OptionsPost', 'provisioning/model/OptionsPostResponseStatus', 'provisioning/model/OptionsPostResponseStatusError', 'provisioning/model/OptionsPostResponseStatusSuccess', 'provisioning/model/OptionsPut', 'provisioning/model/OptionsPutResponseError', 'provisioning/model/OptionsPutResponseStatus', 'provisioning/model/OptionsPutResponseStatusSuccess', 'provisioning/model/Skill', 'provisioning/model/UsersDelete', 'provisioning/model/UsersDeleteResponseError', 'provisioning/model/UsersDeleteResponseStatusError', 'provisioning/model/UsersDeleteResponseStatusSuccess', 'provisioning/model/UsersDeleteResponseSuccess', 'provisioning/model/UsersGetResponseError', 'provisioning/model/UsersGetResponseStatusError', 'provisioning/model/UsersGetResponseStatusSuccess', 'provisioning/model/UsersGetResponseStatusSuccessData', 'provisioning/model/UsersGetResponseStatusSuccessDataSkills', 'provisioning/model/UsersGetResponseSuccess', 'provisioning/model/UsersPostResponseStatus', 'provisioning/model/UsersPostResponseStatusSuccess', 'provisioning/model/UsersPut', 'provisioning/model/UsersPutResponseError', 'provisioning/model/UsersPutResponseStatus', 'provisioning/model/UsersPutResponseStatusSuccess', 'provisioning/model/UsersPutWwe', 'provisioning/api/DocumentationApi', 'provisioning/api/LoginApi', 'provisioning/api/ObjectsApi', 'provisioning/api/OptionsApi', 'provisioning/api/UsersApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AddUser'), require('./model/AddUserWwe'), require('./model/ApiErrorResponse'), require('./model/ApiSuccessResponse'), require('./model/ApiSuccessResponseStatus'), require('./model/Extension'), require('./model/Login'), require('./model/LoginSuccessResponse'), require('./model/LoginSuccessResponseData'), require('./model/LoginSuccessResponseStatus'), require('./model/ModelDelete'), require('./model/ObjectsGetResponseError'), require('./model/ObjectsGetResponseStatusError'), require('./model/ObjectsGetResponseStatusSuccess'), require('./model/ObjectsGetResponseStatusSuccessData'), require('./model/ObjectsGetResponseSuccess'), require('./model/OptionsGetResponseError'), require('./model/OptionsGetResponseStatusError'), require('./model/OptionsGetResponseStatusSuccess'), require('./model/OptionsGetResponseStatusSuccessData'), require('./model/OptionsGetResponseSuccess'), require('./model/OptionsPost'), require('./model/OptionsPostResponseStatus'), require('./model/OptionsPostResponseStatusError'), require('./model/OptionsPostResponseStatusSuccess'), require('./model/OptionsPut'), require('./model/OptionsPutResponseError'), require('./model/OptionsPutResponseStatus'), require('./model/OptionsPutResponseStatusSuccess'), require('./model/Skill'), require('./model/UsersDelete'), require('./model/UsersDeleteResponseError'), require('./model/UsersDeleteResponseStatusError'), require('./model/UsersDeleteResponseStatusSuccess'), require('./model/UsersDeleteResponseSuccess'), require('./model/UsersGetResponseError'), require('./model/UsersGetResponseStatusError'), require('./model/UsersGetResponseStatusSuccess'), require('./model/UsersGetResponseStatusSuccessData'), require('./model/UsersGetResponseStatusSuccessDataSkills'), require('./model/UsersGetResponseSuccess'), require('./model/UsersPostResponseStatus'), require('./model/UsersPostResponseStatusSuccess'), require('./model/UsersPut'), require('./model/UsersPutResponseError'), require('./model/UsersPutResponseStatus'), require('./model/UsersPutResponseStatusSuccess'), require('./model/UsersPutWwe'), require('./api/DocumentationApi'), require('./api/LoginApi'), require('./api/ObjectsApi'), require('./api/OptionsApi'), require('./api/UsersApi'));
  }
}(function(ApiClient, AddUser, AddUserWwe, ApiErrorResponse, ApiSuccessResponse, ApiSuccessResponseStatus, Extension, Login, LoginSuccessResponse, LoginSuccessResponseData, LoginSuccessResponseStatus, ModelDelete, ObjectsGetResponseError, ObjectsGetResponseStatusError, ObjectsGetResponseStatusSuccess, ObjectsGetResponseStatusSuccessData, ObjectsGetResponseSuccess, OptionsGetResponseError, OptionsGetResponseStatusError, OptionsGetResponseStatusSuccess, OptionsGetResponseStatusSuccessData, OptionsGetResponseSuccess, OptionsPost, OptionsPostResponseStatus, OptionsPostResponseStatusError, OptionsPostResponseStatusSuccess, OptionsPut, OptionsPutResponseError, OptionsPutResponseStatus, OptionsPutResponseStatusSuccess, Skill, UsersDelete, UsersDeleteResponseError, UsersDeleteResponseStatusError, UsersDeleteResponseStatusSuccess, UsersDeleteResponseSuccess, UsersGetResponseError, UsersGetResponseStatusError, UsersGetResponseStatusSuccess, UsersGetResponseStatusSuccessData, UsersGetResponseStatusSuccessDataSkills, UsersGetResponseSuccess, UsersPostResponseStatus, UsersPostResponseStatusSuccess, UsersPut, UsersPutResponseError, UsersPutResponseStatus, UsersPutResponseStatusSuccess, UsersPutWwe, DocumentationApi, LoginApi, ObjectsApi, OptionsApi, UsersApi) {
  'use strict';

  /**
   * The_provisioning_service_will_be_used_to_create_objects_in_configuration_server_in_a_way_that_is_consistent_with_the_BEC_model_The_users_resource_will_be_used_to_perform_CRUD_operations_on_config_server_person_objects__Note_that_this_API_will_extend_the_low_level_configuration_server_API_to_add_additional_functionality_that_will_allow_persons_to_be_created_in_a_way_that_makes_them_immediately_useable_in_BEC__Operations_on_this_resource_may_result_in_other_configuration_objects_being_modified_as_well_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ProvisioningApi = require('provisioning/index'); // See note below*.
   * var xxxSvc = new ProvisioningApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ProvisioningApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['provisioning/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ProvisioningApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ProvisioningApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module provisioning/index
   * @version 9.0.000.00.646
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:provisioning/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AddUser model constructor.
     * @property {module:provisioning/model/AddUser}
     */
    AddUser: AddUser,
    /**
     * The AddUserWwe model constructor.
     * @property {module:provisioning/model/AddUserWwe}
     */
    AddUserWwe: AddUserWwe,
    /**
     * The ApiErrorResponse model constructor.
     * @property {module:provisioning/model/ApiErrorResponse}
     */
    ApiErrorResponse: ApiErrorResponse,
    /**
     * The ApiSuccessResponse model constructor.
     * @property {module:provisioning/model/ApiSuccessResponse}
     */
    ApiSuccessResponse: ApiSuccessResponse,
    /**
     * The ApiSuccessResponseStatus model constructor.
     * @property {module:provisioning/model/ApiSuccessResponseStatus}
     */
    ApiSuccessResponseStatus: ApiSuccessResponseStatus,
    /**
     * The Extension model constructor.
     * @property {module:provisioning/model/Extension}
     */
    Extension: Extension,
    /**
     * The Login model constructor.
     * @property {module:provisioning/model/Login}
     */
    Login: Login,
    /**
     * The LoginSuccessResponse model constructor.
     * @property {module:provisioning/model/LoginSuccessResponse}
     */
    LoginSuccessResponse: LoginSuccessResponse,
    /**
     * The LoginSuccessResponseData model constructor.
     * @property {module:provisioning/model/LoginSuccessResponseData}
     */
    LoginSuccessResponseData: LoginSuccessResponseData,
    /**
     * The LoginSuccessResponseStatus model constructor.
     * @property {module:provisioning/model/LoginSuccessResponseStatus}
     */
    LoginSuccessResponseStatus: LoginSuccessResponseStatus,
    /**
     * The ModelDelete model constructor.
     * @property {module:provisioning/model/ModelDelete}
     */
    ModelDelete: ModelDelete,
    /**
     * The ObjectsGetResponseError model constructor.
     * @property {module:provisioning/model/ObjectsGetResponseError}
     */
    ObjectsGetResponseError: ObjectsGetResponseError,
    /**
     * The ObjectsGetResponseStatusError model constructor.
     * @property {module:provisioning/model/ObjectsGetResponseStatusError}
     */
    ObjectsGetResponseStatusError: ObjectsGetResponseStatusError,
    /**
     * The ObjectsGetResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/ObjectsGetResponseStatusSuccess}
     */
    ObjectsGetResponseStatusSuccess: ObjectsGetResponseStatusSuccess,
    /**
     * The ObjectsGetResponseStatusSuccessData model constructor.
     * @property {module:provisioning/model/ObjectsGetResponseStatusSuccessData}
     */
    ObjectsGetResponseStatusSuccessData: ObjectsGetResponseStatusSuccessData,
    /**
     * The ObjectsGetResponseSuccess model constructor.
     * @property {module:provisioning/model/ObjectsGetResponseSuccess}
     */
    ObjectsGetResponseSuccess: ObjectsGetResponseSuccess,
    /**
     * The OptionsGetResponseError model constructor.
     * @property {module:provisioning/model/OptionsGetResponseError}
     */
    OptionsGetResponseError: OptionsGetResponseError,
    /**
     * The OptionsGetResponseStatusError model constructor.
     * @property {module:provisioning/model/OptionsGetResponseStatusError}
     */
    OptionsGetResponseStatusError: OptionsGetResponseStatusError,
    /**
     * The OptionsGetResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/OptionsGetResponseStatusSuccess}
     */
    OptionsGetResponseStatusSuccess: OptionsGetResponseStatusSuccess,
    /**
     * The OptionsGetResponseStatusSuccessData model constructor.
     * @property {module:provisioning/model/OptionsGetResponseStatusSuccessData}
     */
    OptionsGetResponseStatusSuccessData: OptionsGetResponseStatusSuccessData,
    /**
     * The OptionsGetResponseSuccess model constructor.
     * @property {module:provisioning/model/OptionsGetResponseSuccess}
     */
    OptionsGetResponseSuccess: OptionsGetResponseSuccess,
    /**
     * The OptionsPost model constructor.
     * @property {module:provisioning/model/OptionsPost}
     */
    OptionsPost: OptionsPost,
    /**
     * The OptionsPostResponseStatus model constructor.
     * @property {module:provisioning/model/OptionsPostResponseStatus}
     */
    OptionsPostResponseStatus: OptionsPostResponseStatus,
    /**
     * The OptionsPostResponseStatusError model constructor.
     * @property {module:provisioning/model/OptionsPostResponseStatusError}
     */
    OptionsPostResponseStatusError: OptionsPostResponseStatusError,
    /**
     * The OptionsPostResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/OptionsPostResponseStatusSuccess}
     */
    OptionsPostResponseStatusSuccess: OptionsPostResponseStatusSuccess,
    /**
     * The OptionsPut model constructor.
     * @property {module:provisioning/model/OptionsPut}
     */
    OptionsPut: OptionsPut,
    /**
     * The OptionsPutResponseError model constructor.
     * @property {module:provisioning/model/OptionsPutResponseError}
     */
    OptionsPutResponseError: OptionsPutResponseError,
    /**
     * The OptionsPutResponseStatus model constructor.
     * @property {module:provisioning/model/OptionsPutResponseStatus}
     */
    OptionsPutResponseStatus: OptionsPutResponseStatus,
    /**
     * The OptionsPutResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/OptionsPutResponseStatusSuccess}
     */
    OptionsPutResponseStatusSuccess: OptionsPutResponseStatusSuccess,
    /**
     * The Skill model constructor.
     * @property {module:provisioning/model/Skill}
     */
    Skill: Skill,
    /**
     * The UsersDelete model constructor.
     * @property {module:provisioning/model/UsersDelete}
     */
    UsersDelete: UsersDelete,
    /**
     * The UsersDeleteResponseError model constructor.
     * @property {module:provisioning/model/UsersDeleteResponseError}
     */
    UsersDeleteResponseError: UsersDeleteResponseError,
    /**
     * The UsersDeleteResponseStatusError model constructor.
     * @property {module:provisioning/model/UsersDeleteResponseStatusError}
     */
    UsersDeleteResponseStatusError: UsersDeleteResponseStatusError,
    /**
     * The UsersDeleteResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/UsersDeleteResponseStatusSuccess}
     */
    UsersDeleteResponseStatusSuccess: UsersDeleteResponseStatusSuccess,
    /**
     * The UsersDeleteResponseSuccess model constructor.
     * @property {module:provisioning/model/UsersDeleteResponseSuccess}
     */
    UsersDeleteResponseSuccess: UsersDeleteResponseSuccess,
    /**
     * The UsersGetResponseError model constructor.
     * @property {module:provisioning/model/UsersGetResponseError}
     */
    UsersGetResponseError: UsersGetResponseError,
    /**
     * The UsersGetResponseStatusError model constructor.
     * @property {module:provisioning/model/UsersGetResponseStatusError}
     */
    UsersGetResponseStatusError: UsersGetResponseStatusError,
    /**
     * The UsersGetResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/UsersGetResponseStatusSuccess}
     */
    UsersGetResponseStatusSuccess: UsersGetResponseStatusSuccess,
    /**
     * The UsersGetResponseStatusSuccessData model constructor.
     * @property {module:provisioning/model/UsersGetResponseStatusSuccessData}
     */
    UsersGetResponseStatusSuccessData: UsersGetResponseStatusSuccessData,
    /**
     * The UsersGetResponseStatusSuccessDataSkills model constructor.
     * @property {module:provisioning/model/UsersGetResponseStatusSuccessDataSkills}
     */
    UsersGetResponseStatusSuccessDataSkills: UsersGetResponseStatusSuccessDataSkills,
    /**
     * The UsersGetResponseSuccess model constructor.
     * @property {module:provisioning/model/UsersGetResponseSuccess}
     */
    UsersGetResponseSuccess: UsersGetResponseSuccess,
    /**
     * The UsersPostResponseStatus model constructor.
     * @property {module:provisioning/model/UsersPostResponseStatus}
     */
    UsersPostResponseStatus: UsersPostResponseStatus,
    /**
     * The UsersPostResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/UsersPostResponseStatusSuccess}
     */
    UsersPostResponseStatusSuccess: UsersPostResponseStatusSuccess,
    /**
     * The UsersPut model constructor.
     * @property {module:provisioning/model/UsersPut}
     */
    UsersPut: UsersPut,
    /**
     * The UsersPutResponseError model constructor.
     * @property {module:provisioning/model/UsersPutResponseError}
     */
    UsersPutResponseError: UsersPutResponseError,
    /**
     * The UsersPutResponseStatus model constructor.
     * @property {module:provisioning/model/UsersPutResponseStatus}
     */
    UsersPutResponseStatus: UsersPutResponseStatus,
    /**
     * The UsersPutResponseStatusSuccess model constructor.
     * @property {module:provisioning/model/UsersPutResponseStatusSuccess}
     */
    UsersPutResponseStatusSuccess: UsersPutResponseStatusSuccess,
    /**
     * The UsersPutWwe model constructor.
     * @property {module:provisioning/model/UsersPutWwe}
     */
    UsersPutWwe: UsersPutWwe,
    /**
     * The DocumentationApi service constructor.
     * @property {module:provisioning/api/DocumentationApi}
     */
    DocumentationApi: DocumentationApi,
    /**
     * The LoginApi service constructor.
     * @property {module:provisioning/api/LoginApi}
     */
    LoginApi: LoginApi,
    /**
     * The ObjectsApi service constructor.
     * @property {module:provisioning/api/ObjectsApi}
     */
    ObjectsApi: ObjectsApi,
    /**
     * The OptionsApi service constructor.
     * @property {module:provisioning/api/OptionsApi}
     */
    OptionsApi: OptionsApi,
    /**
     * The UsersApi service constructor.
     * @property {module:provisioning/api/UsersApi}
     */
    UsersApi: UsersApi
  };

  return exports;
}));
