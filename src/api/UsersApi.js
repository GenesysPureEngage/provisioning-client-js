/**
 * Provisioning API
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model.  The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.423
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UsersDeleteResponseError', 'model/UsersDeleteResponseSuccess', 'model/UsersGetResponseError', 'model/UsersGetResponseSuccess', 'model/UsersPost', 'model/UsersPostResponse', 'model/UsersPostResponseError', 'model/UsersPut', 'model/UsersPutResponseError', 'model/UsersPutResponseStatusSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UsersDeleteResponseError'), require('../model/UsersDeleteResponseSuccess'), require('../model/UsersGetResponseError'), require('../model/UsersGetResponseSuccess'), require('../model/UsersPost'), require('../model/UsersPostResponse'), require('../model/UsersPostResponseError'), require('../model/UsersPut'), require('../model/UsersPutResponseError'), require('../model/UsersPutResponseStatusSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.ProvisioningApi) {
      root.ProvisioningApi = {};
    }
    root.ProvisioningApi.UsersApi = factory(root.ProvisioningApi.ApiClient, root.ProvisioningApi.UsersDeleteResponseError, root.ProvisioningApi.UsersDeleteResponseSuccess, root.ProvisioningApi.UsersGetResponseError, root.ProvisioningApi.UsersGetResponseSuccess, root.ProvisioningApi.UsersPost, root.ProvisioningApi.UsersPostResponse, root.ProvisioningApi.UsersPostResponseError, root.ProvisioningApi.UsersPut, root.ProvisioningApi.UsersPutResponseError, root.ProvisioningApi.UsersPutResponseStatusSuccess);
  }
}(this, function(ApiClient, UsersDeleteResponseError, UsersDeleteResponseSuccess, UsersGetResponseError, UsersGetResponseSuccess, UsersPost, UsersPostResponse, UsersPostResponseError, UsersPut, UsersPutResponseError, UsersPutResponseStatusSuccess) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 9.0.000.00.423
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/UsersApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersGetResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user
     * The GET operation will fetch specified CfgPerson object from configuration server
     * @param {String} dbid User DBID or string &#39;me&#39; or &#39;skills&#39;
     * @param {module:api/UsersApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersGetResponseSuccess}
     */
    this.userGet = function(dbid, callback) {
      var postBody = null;

      // verify the required parameter 'dbid' is set
      if (dbid == undefined || dbid == null) {
        throw new Error("Missing the required parameter 'dbid' when calling userGet");
      }


      var pathParams = {
        'dbid': dbid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersGetResponseSuccess;

      return this.apiClient.callApi(
        '/users/{dbid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDelete operation.
     * @callback module:api/UsersApi~usersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersDeleteResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user
     * This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
     * @param {String} dbid User DBID
     * @param {module:api/UsersApi~usersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersDeleteResponseSuccess}
     */
    this.usersDelete = function(dbid, callback) {
      var postBody = null;

      // verify the required parameter 'dbid' is set
      if (dbid == undefined || dbid == null) {
        throw new Error("Missing the required parameter 'dbid' when calling usersDelete");
      }


      var pathParams = {
        'dbid': dbid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersDeleteResponseSuccess;

      return this.apiClient.callApi(
        '/users/{dbid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UsersApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersGetResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read users
     * The GET operation will fetch CfgPerson objects from configuration server, possible with filters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit number of users to fetch
     * @param {Number} opts.offset Skip first N matches
     * @param {module:model/String} opts.order Sort results ascending/descending
     * @param {String} opts.sortBy comma-separated list of fields to sort on, supported: firstName,lastName,userName 
     * @param {module:model/String} opts.filterName Users filter name
     * @param {String} opts.filterParameters Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified. 
     * @param {String} opts.roles Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN 
     * @param {String} opts.skills Only fetch users with specified skills, comma-separated. 
     * @param {Boolean} opts.userEnabled Fetch only enabled or disabled users.
     * @param {module:model/String} opts.userValid Fetch only valid or invalid users.
     * @param {module:api/UsersApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersGetResponseSuccess}
     */
    this.usersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'sortBy': opts['sortBy'],
        'filterName': opts['filterName'],
        'filterParameters': opts['filterParameters'],
        'roles': opts['roles'],
        'skills': opts['skills'],
        'userEnabled': opts['userEnabled'],
        'userValid': opts['userValid']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersGetResponseSuccess;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/UsersApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPostResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new user
     * The POST operation will create a new CfgPerson object in configuration server and configure related objects
     * @param {module:model/UsersPost} body Body Data
     * @param {module:api/UsersApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPostResponse}
     */
    this.usersPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling usersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersPostResponse;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPut operation.
     * @callback module:api/UsersApi~usersPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPutResponseStatusSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user
     * This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
     * @param {String} dbid User DBID
     * @param {module:model/UsersPut} body Body Data
     * @param {module:api/UsersApi~usersPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPutResponseStatusSuccess}
     */
    this.usersPut = function(dbid, body, callback) {
      var postBody = body;

      // verify the required parameter 'dbid' is set
      if (dbid == undefined || dbid == null) {
        throw new Error("Missing the required parameter 'dbid' when calling usersPut");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling usersPut");
      }


      var pathParams = {
        'dbid': dbid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersPutResponseStatusSuccess;

      return this.apiClient.callApi(
        '/users/{dbid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
