/**
 * Provisioning API
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model.  The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.423
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ObjectsGetResponseError', 'model/ObjectsGetResponseSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ObjectsGetResponseError'), require('../model/ObjectsGetResponseSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.ProvisioningApi) {
      root.ProvisioningApi = {};
    }
    root.ProvisioningApi.ObjectsApi = factory(root.ProvisioningApi.ApiClient, root.ProvisioningApi.ObjectsGetResponseError, root.ProvisioningApi.ObjectsGetResponseSuccess);
  }
}(this, function(ApiClient, ObjectsGetResponseError, ObjectsGetResponseSuccess) {
  'use strict';

  /**
   * Objects service.
   * @module api/ObjectsApi
   * @version 9.0.000.00.423
   */

  /**
   * Constructs a new ObjectsApi. 
   * @alias module:api/ObjectsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the objectsGet operation.
     * @callback module:api/ObjectsApi~objectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectsGetResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read DNs or Agent Groups
     * The GET operation will fetch objects from configuration server, possible with filters
     * @param {String} objectType Object type - &#39;dns&#39; or &#39;agent-groups&#39;
     * @param {String} dnType DN type if object_type &#x3D; &#39;dns&#39; (e.g. CFGRoutingPoint). Refer Configuration Server API docs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit number of objects to fetch
     * @param {Number} opts.offset Skip first N matches
     * @param {String} opts.searchTerm Part of CFGDN.number or CfgGroup.name. 
     * @param {String} opts.matchMethod Method to match the search_term (&#39;includes&#39;, &#39;startsWith&#39;, &#39;endsWith&#39;, &#39;isEqual&#39;). 
     * @param {module:api/ObjectsApi~objectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectsGetResponseSuccess}
     */
    this.objectsGet = function(objectType, dnType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectType' is set
      if (objectType == undefined || objectType == null) {
        throw new Error("Missing the required parameter 'objectType' when calling objectsGet");
      }

      // verify the required parameter 'dnType' is set
      if (dnType == undefined || dnType == null) {
        throw new Error("Missing the required parameter 'dnType' when calling objectsGet");
      }


      var pathParams = {
        'object_type': objectType,
        'dn_type': dnType
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search_term': opts['searchTerm'],
        'match_method': opts['matchMethod']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectsGetResponseSuccess;

      return this.apiClient.callApi(
        '/objects/{object_type}/{dn_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
