/**
 * Provisioning API
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.46.3206
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/DeleteMetadataResponse', 'model/GetAnyLocationsResponse', 'model/GetEnabledResponse', 'model/GetLocationResponse', 'model/GetSPMetadataResponse', 'model/PostLocationResponse', 'model/RefreshResponse', 'model/SendMetadataResponse', 'model/SetAnyLocationsResponse', 'model/SetEnabledResponse', 'model/SettingsData', 'model/StatusResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/DeleteMetadataResponse'), require('../model/GetAnyLocationsResponse'), require('../model/GetEnabledResponse'), require('../model/GetLocationResponse'), require('../model/GetSPMetadataResponse'), require('../model/PostLocationResponse'), require('../model/RefreshResponse'), require('../model/SendMetadataResponse'), require('../model/SetAnyLocationsResponse'), require('../model/SetEnabledResponse'), require('../model/SettingsData'), require('../model/StatusResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.ProvisioningApi) {
      root.ProvisioningApi = {};
    }
    root.ProvisioningApi.SamlSettingsApi = factory(root.ProvisioningApi.ApiClient, root.ProvisioningApi.ApiErrorResponse, root.ProvisioningApi.DeleteMetadataResponse, root.ProvisioningApi.GetAnyLocationsResponse, root.ProvisioningApi.GetEnabledResponse, root.ProvisioningApi.GetLocationResponse, root.ProvisioningApi.GetSPMetadataResponse, root.ProvisioningApi.PostLocationResponse, root.ProvisioningApi.RefreshResponse, root.ProvisioningApi.SendMetadataResponse, root.ProvisioningApi.SetAnyLocationsResponse, root.ProvisioningApi.SetEnabledResponse, root.ProvisioningApi.SettingsData, root.ProvisioningApi.StatusResponse);
  }
}(this, function(ApiClient, ApiErrorResponse, DeleteMetadataResponse, GetAnyLocationsResponse, GetEnabledResponse, GetLocationResponse, GetSPMetadataResponse, PostLocationResponse, RefreshResponse, SendMetadataResponse, SetAnyLocationsResponse, SetEnabledResponse, SettingsData, StatusResponse) {
  'use strict';

  /**
   * SamlSettings service.
   * @module api/SamlSettingsApi
   * @version 9.0.000.46.3206
   */

  /**
   * Constructs a new SamlSettingsApi. 
   * @alias module:api/SamlSettingsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete upload metadata.
     * Delete metadata.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The region where send metadata.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteMetadataResponse} and HTTP response
     */
    this.deleteMetadataWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'location': opts['location'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeleteMetadataResponse;

      return this.apiClient.callApi(
        '/saml-settings/metadata', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete upload metadata.
     * Delete metadata.
     * @param {Object} opts Optional parameters
     * @param {String} opts.location The region where send metadata.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteMetadataResponse}
     */
    this.deleteMetadata = function(opts) {
      return this.deleteMetadataWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get region settings.
     * Returns selected region settings.
     * @param {String} region The name of region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAnyLocationsResponse} and HTTP response
     */
    this.getAnyLocationsWithHttpInfo = function(region) {
      var postBody = null;

      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling getAnyLocations");
      }


      var pathParams = {
        'region': region
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAnyLocationsResponse;

      return this.apiClient.callApi(
        '/saml-settings/locations/{region}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get region settings.
     * Returns selected region settings.
     * @param {String} region The name of region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAnyLocationsResponse}
     */
    this.getAnyLocations = function(region) {
      return this.getAnyLocationsWithHttpInfo(region)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get SAML state.
     * Returns SAML current state.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEnabledResponse} and HTTP response
     */
    this.getEnabledWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetEnabledResponse;

      return this.apiClient.callApi(
        '/saml-settings/enabled', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get SAML state.
     * Returns SAML current state.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEnabledResponse}
     */
    this.getEnabled = function() {
      return this.getEnabledWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get exist locations.
     * Returns exist locations.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLocationResponse} and HTTP response
     */
    this.getLocationsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetLocationResponse;

      return this.apiClient.callApi(
        '/saml-settings/locations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get exist locations.
     * Returns exist locations.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLocationResponse}
     */
    this.getLocations = function() {
      return this.getLocationsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Metadata
     * Returns exist Metadata xml file.
     * @param {String} location Define SAML location.
     * @param {Boolean} download Define if need download file.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noSpinner Define if need page reload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSPMetadataResponse} and HTTP response
     */
    this.getSPMetadataWithHttpInfo = function(location, download, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling getSPMetadata");
      }

      // verify the required parameter 'download' is set
      if (download === undefined || download === null) {
        throw new Error("Missing the required parameter 'download' when calling getSPMetadata");
      }


      var pathParams = {
      };
      var queryParams = {
        'location': location,
        'download': download,
        'noSpinner': opts['noSpinner'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSPMetadataResponse;

      return this.apiClient.callApi(
        '/saml-settings/sp-metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Metadata
     * Returns exist Metadata xml file.
     * @param {String} location Define SAML location.
     * @param {Boolean} download Define if need download file.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noSpinner Define if need page reload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSPMetadataResponse}
     */
    this.getSPMetadata = function(location, download, opts) {
      return this.getSPMetadataWithHttpInfo(location, download, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set region settings.
     * Change region settings.
     * @param {String} region The name of region
     * @param {module:model/SettingsData} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetAnyLocationsResponse} and HTTP response
     */
    this.postAnyLocationsWithHttpInfo = function(region, data) {
      var postBody = data;

      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling postAnyLocations");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling postAnyLocations");
      }


      var pathParams = {
        'region': region
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SetAnyLocationsResponse;

      return this.apiClient.callApi(
        '/saml-settings/locations/{region}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set region settings.
     * Change region settings.
     * @param {String} region The name of region
     * @param {module:model/SettingsData} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetAnyLocationsResponse}
     */
    this.postAnyLocations = function(region, data) {
      return this.postAnyLocationsWithHttpInfo(region, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set main settings.
     * Change global settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostLocationResponse} and HTTP response
     */
    this.postLocationWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostLocationResponse;

      return this.apiClient.callApi(
        '/saml-settings/locations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set main settings.
     * Change global settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostLocationResponse}
     */
    this.postLocation = function() {
      return this.postLocationWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Refresh auth state in the selected region.
     * Change current SAML state.
     * @param {String} region The name of region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RefreshResponse} and HTTP response
     */
    this.refreshWithHttpInfo = function(region) {
      var postBody = null;

      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling refresh");
      }


      var pathParams = {
        'region': region
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RefreshResponse;

      return this.apiClient.callApi(
        '/saml-settings/refresh/{region}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Refresh auth state in the selected region.
     * Change current SAML state.
     * @param {String} region The name of region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RefreshResponse}
     */
    this.refresh = function(region) {
      return this.refreshWithHttpInfo(region)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload new metadata.
     * Adds or updates the specified metadata.
     * @param {Object} opts Optional parameters
     * @param {File} opts.metadataFile The metadata as xml file.
     * @param {String} opts.location The region where send metadata.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMetadataResponse} and HTTP response
     */
    this.sendMetadataWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'metadata_file': opts['metadataFile'],
        'location': opts['location']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SendMetadataResponse;

      return this.apiClient.callApi(
        '/saml-settings/metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload new metadata.
     * Adds or updates the specified metadata.
     * @param {Object} opts Optional parameters
     * @param {File} opts.metadataFile The metadata as xml file.
     * @param {String} opts.location The region where send metadata.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMetadataResponse}
     */
    this.sendMetadata = function(opts) {
      return this.sendMetadataWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set SAML state.
     * Change current SAML state.
     * @param {Boolean} sAMLEnabled Value that define SAML state.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetEnabledResponse} and HTTP response
     */
    this.setEnabledWithHttpInfo = function(sAMLEnabled) {
      var postBody = null;

      // verify the required parameter 'sAMLEnabled' is set
      if (sAMLEnabled === undefined || sAMLEnabled === null) {
        throw new Error("Missing the required parameter 'sAMLEnabled' when calling setEnabled");
      }


      var pathParams = {
      };
      var queryParams = {
        'SAMLEnabled': sAMLEnabled,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SetEnabledResponse;

      return this.apiClient.callApi(
        '/saml-settings/enabled', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set SAML state.
     * Change current SAML state.
     * @param {Boolean} sAMLEnabled Value that define SAML state.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetEnabledResponse}
     */
    this.setEnabled = function(sAMLEnabled) {
      return this.setEnabledWithHttpInfo(sAMLEnabled)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get status of region configuration.
     * Receive current status of configuration.
     * @param {String} region The name of region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatusResponse} and HTTP response
     */
    this.statusWithHttpInfo = function(region) {
      var postBody = null;

      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling status");
      }


      var pathParams = {
        'region': region
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatusResponse;

      return this.apiClient.callApi(
        '/saml-settings/status/{region}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get status of region configuration.
     * Receive current status of configuration.
     * @param {String} region The name of region
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatusResponse}
     */
    this.status = function(region) {
      return this.statusWithHttpInfo(region)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
