/**
 * Provisioning API
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.46.3206
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/DeleteMOHFilesResponse', 'model/GetMOHFilesResponse', 'model/GetMOHSettings', 'model/SendMOHFilesResponse', 'model/SendMOHSettingsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiErrorResponse'), require('../model/DeleteMOHFilesResponse'), require('../model/GetMOHFilesResponse'), require('../model/GetMOHSettings'), require('../model/SendMOHFilesResponse'), require('../model/SendMOHSettingsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.ProvisioningApi) {
      root.ProvisioningApi = {};
    }
    root.ProvisioningApi.MusicOnHoldApi = factory(root.ProvisioningApi.ApiClient, root.ProvisioningApi.ApiErrorResponse, root.ProvisioningApi.DeleteMOHFilesResponse, root.ProvisioningApi.GetMOHFilesResponse, root.ProvisioningApi.GetMOHSettings, root.ProvisioningApi.SendMOHFilesResponse, root.ProvisioningApi.SendMOHSettingsResponse);
  }
}(this, function(ApiClient, ApiErrorResponse, DeleteMOHFilesResponse, GetMOHFilesResponse, GetMOHSettings, SendMOHFilesResponse, SendMOHSettingsResponse) {
  'use strict';

  /**
   * MusicOnHold service.
   * @module api/MusicOnHoldApi
   * @version 9.0.000.46.3206
   */

  /**
   * Constructs a new MusicOnHoldApi. 
   * @alias module:api/MusicOnHoldApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete WAV file.
     * Delete the specified WAV file.
     * @param {String} fileName The musicFile name for deleting from MOH.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteMOHFilesResponse} and HTTP response
     */
    this.deleteMOHFilesWithHttpInfo = function(fileName) {
      var postBody = null;

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling deleteMOHFiles");
      }


      var pathParams = {
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeleteMOHFilesResponse;

      return this.apiClient.callApi(
        '/music-on-hold/files/{fileName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete WAV file.
     * Delete the specified WAV file.
     * @param {String} fileName The musicFile name for deleting from MOH.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteMOHFilesResponse}
     */
    this.deleteMOHFiles = function(fileName) {
      return this.deleteMOHFilesWithHttpInfo(fileName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get WAV files for MOH.
     * Returns exist WAV files.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetMOHFilesResponse} and HTTP response
     */
    this.getMOHFilesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetMOHFilesResponse;

      return this.apiClient.callApi(
        '/music-on-hold/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get WAV files for MOH.
     * Returns exist WAV files.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetMOHFilesResponse}
     */
    this.getMOHFiles = function() {
      return this.getMOHFilesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get exist setting.
     * Returns exist setting from MOH.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetMOHSettings} and HTTP response
     */
    this.getMOHSettingsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetMOHSettings;

      return this.apiClient.callApi(
        '/music-on-hold/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get exist setting.
     * Returns exist setting from MOH.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetMOHSettings}
     */
    this.getMOHSettings = function() {
      return this.getMOHSettingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload WAV file to MOH.
     * Upload the specified WAV file to the MOH.
     * @param {File} musicFile The musicFile file for uploading to MOH.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMOHFilesResponse} and HTTP response
     */
    this.sendMOHFilesWithHttpInfo = function(musicFile) {
      var postBody = null;

      // verify the required parameter 'musicFile' is set
      if (musicFile === undefined || musicFile === null) {
        throw new Error("Missing the required parameter 'musicFile' when calling sendMOHFiles");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'musicFile': musicFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SendMOHFilesResponse;

      return this.apiClient.callApi(
        '/music-on-hold/files', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload WAV file to MOH.
     * Upload the specified WAV file to the MOH.
     * @param {File} musicFile The musicFile file for uploading to MOH.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMOHFilesResponse}
     */
    this.sendMOHFiles = function(musicFile) {
      return this.sendMOHFilesWithHttpInfo(musicFile)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update MOH settings.
     * Adds or updates MOH setting.
     * @param {String} musicFile The Name of WAV file.
     * @param {Boolean} musicEnabled Define is music enabled/disabled.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMOHSettingsResponse} and HTTP response
     */
    this.sendMOHSettingsWithHttpInfo = function(musicFile, musicEnabled) {
      var postBody = null;

      // verify the required parameter 'musicFile' is set
      if (musicFile === undefined || musicFile === null) {
        throw new Error("Missing the required parameter 'musicFile' when calling sendMOHSettings");
      }

      // verify the required parameter 'musicEnabled' is set
      if (musicEnabled === undefined || musicEnabled === null) {
        throw new Error("Missing the required parameter 'musicEnabled' when calling sendMOHSettings");
      }


      var pathParams = {
      };
      var queryParams = {
        'musicFile': musicFile,
        'musicEnabled': musicEnabled,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SendMOHSettingsResponse;

      return this.apiClient.callApi(
        '/music-on-hold/settings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update MOH settings.
     * Adds or updates MOH setting.
     * @param {String} musicFile The Name of WAV file.
     * @param {Boolean} musicEnabled Define is music enabled/disabled.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMOHSettingsResponse}
     */
    this.sendMOHSettings = function(musicFile, musicEnabled) {
      return this.sendMOHSettingsWithHttpInfo(musicFile, musicEnabled)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
